#!/usr/bin/python
# coding: utf8
import argparse
import os.path
import traceback
from appdirs import AppDirs

from GooglePhotosSync import GooglePhotosSync
from ProgressHandler import ProgressHandler
from PhotoInfo import PhotoInfo
from LocalData import LocalData

APPNAME = "gphotos-sync"


def download_folder(folder_id, path, google_photos_sync, args):
    print('-------------------- %s' % path)
    progress_handler = None
    for remote_media in google_photos_sync.get_remote_medias(folder_id, path):
        mime = remote_media.drive_file.metadata[u'mimeType']
        if mime.endswith('folder'):
            new_path = os.path.join(path, remote_media.filename)
            download_folder(remote_media.id, new_path, google_photos_sync, args)
        else:
            if args.index_only:
                if google_photos_sync.is_indexed(path, remote_media):
                    continue
            else:
                if google_photos_sync.has_local_version(path, remote_media):
                    continue

            if not (args.quiet or args.index_only):
                progress_handler = ProgressHandler(remote_media)

            if mime.startswith("video/") or mime.startswith("image/"):
                google_photos_sync.download_media(
                    remote_media, path, progress_handler=progress_handler)


def download_command(gs, args):
    folder_id = gs.get_photos_folder_id()
    if gs.start_folder != '':
        folder_id = gs.get_remote_folder(folder_id, gs.start_folder)

    download_folder(folder_id, gs.start_folder, gs, args)


def re_upload_command(gs, args):
    progress_handler = None
    for local_media in gs.get_local_medias():

        remote_media = gs.get_remote_media_by_name(
            local_media.filename)

        if not remote_media or remote_media.checksum == local_media.checksum:
            continue

        if args.dry_run:
            print("Re-uploading %s" % remote_media.filename)
            continue

        if not args.quiet:
            progress_handler = ProgressHandler(local_media)

        gs.upload_media(local_media,
                        progress_handler=progress_handler)


###############################################################################
# Main code
###############################################################################

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Google Photos simple synchronization tool")
    parser.add_argument(
        "--quiet",
        action='store_true',
        help="quiet (no output)")
    parser.add_argument(
        "--include-video",
        action='store_true',
        help="include video types in sync")
    parser.add_argument(
        "command",
        choices=["re-upload", "download"],
        help="command to execute")
    parser.add_argument(
        "root_folder",
        help="root of the local folders to download into")
    parser.add_argument(
        "--start-folder",
        help="Google Photos folder to sync e.g. 2017/08, defaults to root",
        default='')
    parser.add_argument(
        "--start-date",
        help="Set the earliest date of files to sync",
        default=None)
    parser.add_argument(
        "--end-date",
        help="Set the latest date of files to sync",
        default=None)
    parser.add_argument(
        "--new-token",
        action='store_true',
        help="Request new token")
    parser.add_argument(
        "--index-only",
        action='store_true',
        help="Only build the index of files in .gphotos.db - no downloads")
    return parser.parse_args()


def main():
    cmd_args = parse_arguments()
    app_dirs = AppDirs(APPNAME)

    data_store = LocalData(cmd_args.root_folder)
    with data_store:

        credentials_file = os.path.join(app_dirs.user_data_dir,
                                        "credentials.json")
        secret_file = os.path.join(app_dirs.user_config_dir,
                                   "client_secret.json")

        google_photos_sync = GooglePhotosSync(cmd_args, data_store,
                                              client_secret_file=secret_file,
                                              credentials_json=credentials_file)

        photo_info = PhotoInfo(cmd_args, data_store)
        photo_info.connect_photos(google_photos_sync.g_auth.credentials)

        try:

            if cmd_args.command == "download":
                download_command(google_photos_sync, cmd_args)
                photo_info.get_albums()

            elif cmd_args.command == "re-upload":
                re_upload_command(google_photos_sync, cmd_args)

        except (KeyboardInterrupt, SystemExit):
            print("\nUser cancelled download")
            print("\nSaving Database ...")
            # save the traceback so we can diagnose lockups
            with open(".gphoto-terminated", "w") as text_file:
                text_file.write(traceback.format_exc())
        finally:
            print("done.")


if __name__ == "__main__":
    main()

# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4
