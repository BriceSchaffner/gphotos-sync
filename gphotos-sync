#!/usr/bin/python
# coding: utf8
import argparse
import os.path
import traceback
from appdirs import AppDirs

from GoogleDriveSync import GoogleDriveSync
from ProgressHandler import ProgressHandler
from PicasaSync import PicasaSync
from LocalData import LocalData
import Utils

APP_NAME = "gphotos-sync"


def download_folder(folder_id, path, google_photos_sync, args):
    print('-------------------- %s' % path)
    progress_handler = None
    for remote_media in google_photos_sync.get_remote_medias(folder_id, path):
        mime = remote_media.mime_type
        if mime.endswith('folder'):
            download_folder(remote_media.id, remote_media.relative_path,
                            google_photos_sync, args)
        elif mime.startswith("video/") or mime.startswith("image/"):
            if args.index_only:
                if google_photos_sync.is_indexed(remote_media):
                    continue
            else:
                if google_photos_sync.has_local_version(remote_media):
                    continue

            if not (args.quiet or args.index_only):
                progress_handler = ProgressHandler(remote_media)
            google_photos_sync.download_media(
                remote_media, path, progress_handler=progress_handler)


def download_command(gs, args):
    folder_id = gs.get_photos_folder_id()
    if gs.start_folder != '':
        folder_id = gs.get_remote_folder(folder_id, gs.start_folder)

    download_folder(folder_id, gs.start_folder, gs, args)


###############################################################################
# Main code
###############################################################################

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Google Photos download tool")
    parser.add_argument(
        "--quiet",
        action='store_true',
        help="quiet (no output)")
    parser.add_argument(
        "--include-video",
        action='store_true',
        help="include video types in sync")
    parser.add_argument(
        "root_folder",
        help="root of the local folders to download into")
    parser.add_argument(
        "--start-folder",
        help='Google Photos folder to sync e.g. "Google Photos/2017/08", '
             'defaults to root',
        default='')
    parser.add_argument(
        "--start-date",
        help="Set the earliest date of files to sync",
        default=None)
    parser.add_argument(
        "--end-date",
        help="Set the latest date of files to sync",
        default=None)
    parser.add_argument(
        "--new-token",
        action='store_true',
        help="Request new token")
    parser.add_argument(
        "--index-only",
        action='store_true',
        help="Only build the index of files in .gphotos.db - no downloads")
    return parser.parse_args()


def main():
    cmd_args = parse_arguments()
    app_dirs = AppDirs(APP_NAME)

    data_store = LocalData(cmd_args.root_folder)
    with data_store:
        credentials_file = os.path.join(
            app_dirs.user_data_dir, "credentials.json")
        secret_file = os.path.join(
            app_dirs.user_config_dir, "client_secret.json")

        google_drive_sync = GoogleDriveSync(
            cmd_args, data_store, client_secret_file=secret_file,
            credentials_json=credentials_file)

        picasa_sync = PicasaSync(google_drive_sync.credentials,
                                 cmd_args, data_store)

        try:
            # google_drive_sync.scan_folder_hierarchy()
            # data_store.store()
            # download_command(google_drive_sync, cmd_args)
            # data_store.store()
            # picasa_sync.index_album_media()
            # data_store.store()
            # picasa_sync.download_album_media()
            # data_store.store()
            picasa_sync.create_album_content_links()

        except (KeyboardInterrupt, SystemExit):
            print("\nUser cancelled download")
            # save the traceback so we can diagnose lockups
            except_file_name = os.path.join(
                os.path.dirname(os.path.abspath(__file__)),
                "etc/.gphoto-terminated")
            with open(except_file_name, "w") as text_file:
                text_file.write(traceback.format_exc())
        finally:
            print("done.")


if __name__ == "__main__":
    main()

# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4
