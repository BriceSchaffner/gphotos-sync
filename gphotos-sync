#!/usr/bin/python
# coding: utf8
import argparse
import os.path
import traceback
from appdirs import AppDirs

from GoogleDriveSync import GoogleDriveSync
import GoogleMedia
from PicasaSync import PicasaSync
from LocalData import LocalData

APP_NAME = "gphotos-sync"


# todo global todos
# switch all string formatting to .format
# docstings everywhere
# add logger instead of prints

###############################################################################
# Main code
###############################################################################

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Google Photos download tool")
    parser.add_argument(
        "--quiet",
        action='store_true',
        help="quiet (no output)")
    parser.add_argument(
        "--include-video",
        action='store_true',
        help="include video types in sync")
    parser.add_argument(
        "root_folder",
        help="root of the local folders to download into")
    parser.add_argument(
        "--start-date",
        help="Set the earliest date of files to sync",
        default=None)
    parser.add_argument(
        "--end-date",
        help="Set the latest date of files to sync",
        default=None)
    parser.add_argument(
        "--new-token",
        action='store_true',
        help="Request new token")
    parser.add_argument(
        "--index-only",
        action='store_true',
        help="Only build the index of files in .gphotos.db - no downloads")
    parser.add_argument(
        "--skip-index",
        action='store_true',
        help="Use index from previous run and start download immediately")
    parser.add_argument(
        "--picasa-only",
        action='store_true',
        help="skip drive scan, (assume that the db is up to date "
             "with drive files - for testing)")
    parser.add_argument(
        "--flush-index",
        action='store_true',
        help="delete the index db, re-scan everything")
    parser.add_argument(
        "--all-drive",
        action='store_true',
        help="when True all folders in drive are scanned for media. "
             "when False only files in the Google Photos folder are scanned. "
             "If you do not use this option then you may find you have albums "
             "that reference media outside of the Google Photos folder and "
             "these would then get downloaded into the picasa folder. The "
             "only downside is that the folder structure is lost.")
    parser.add_argument(
        "--album",
        help="only index a single album (for testing)",
        default=None)
    parser.add_argument(
        "--drive-file",
        help="only index a single drive file (for testing)",
        default=None)
    return parser.parse_args()


def main():
    cmd_args = parse_arguments()
    app_dirs = AppDirs(APP_NAME)

    data_store = LocalData(cmd_args.root_folder, cmd_args.flush_index)

    with data_store:
        credentials_file = os.path.join(
            app_dirs.user_data_dir, "credentials.json")
        secret_file = os.path.join(
            app_dirs.user_config_dir, "client_secret.json")

        google_drive_sync = GoogleDriveSync(
            cmd_args, data_store, client_secret_file=secret_file,
            credentials_json=credentials_file)

        picasa_sync = PicasaSync(google_drive_sync.credentials,
                                 cmd_args, data_store)

        try:
            google_drive_sync.scan_folder_hierarchy()
            if not cmd_args.skip_index:
                if not cmd_args.picasa_only:
                    google_drive_sync.index_drive_media()
                picasa_sync.index_album_media(album_name=cmd_args.album)
            if not cmd_args.index_only:
                picasa_sync.download_album_media()
                if not cmd_args.picasa_only:
                    google_drive_sync.download_drive_media()
            picasa_sync.create_album_content_links()

        except (KeyboardInterrupt):
            print("\nUser cancelled download")
            # save the traceback so we can diagnose lockups
            except_file_name = os.path.join(
                os.path.dirname(os.path.abspath(__file__)),
                "etc/.gphoto-terminated")
            with open(except_file_name, "w") as text_file:
                text_file.write(traceback.format_exc())
        finally:
            print("\nDone.")


if __name__ == "__main__":
    main()
